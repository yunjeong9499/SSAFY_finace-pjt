# Generated by Django 4.2.16 on 2025-05-24 06:02

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=50)),
                ('nickname', models.CharField(max_length=50)),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile/')),
                ('age_group', models.CharField(blank=True, choices=[('10s', '10대'), ('20s', '20대'), ('30s', '30대'), ('40s', '40대'), ('50s+', '50대 이상')], max_length=10)),
                ('job', models.CharField(blank=True, choices=[('company', '회사원'), ('gov', '공무원'), ('self', '자영업자'), ('freelance', '프리랜서'), ('student', '학생 / 무직'), ('etc', '기타')], max_length=20)),
                ('income_level', models.CharField(blank=True, choices=[('under100', '100만 원 이하'), ('100_300', '100~300만 원'), ('300_500', '300~500만 원'), ('over500', '500만 원 이상')], max_length=20)),
                ('consumption_type', models.CharField(blank=True, choices=[('saving', '절약형'), ('flexible', '유동형'), ('spending', '자유소비형')], max_length=20)),
                ('saving_goal', models.CharField(blank=True, choices=[('emergency', '비상금 마련'), ('short', '여행/가전 등 단기 목표'), ('asset', '자산 형성'), ('etc', '기타')], max_length=20)),
                ('saving_period', models.CharField(blank=True, choices=[('under6m', '6개월 미만'), ('6m_1y', '6개월 ~ 1년'), ('1y_3y', '1년 ~ 3년'), ('over3y', '3년 이상')], max_length=20)),
                ('monthly_saving_amount', models.CharField(blank=True, choices=[('under10', '10만 원 이하'), ('10_30', '10~30만 원'), ('30_50', '30~50만 원'), ('over50', '50만 원 이상')], max_length=20)),
                ('preference_tags', models.JSONField(blank=True, null=True)),
                ('survey_completed', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
